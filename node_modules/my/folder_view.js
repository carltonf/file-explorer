// -*- js-indent-level: 2 -*-

var events = require('events');
var fs = require('fs');
var path = require('path');
var jade = require('jade');
var util = require('util');
var mime = require('mime');
var filesize = require('filesize');
var shared_mime = require('freedesktop-shared-mime');

// Template engine
var gen_files_view = jade.compile([
    '- each file in files',
    '  .file(data-path="#{file.path}" mime="#{file.mime}")',
    '    .icon',
    '      img(src="assets/icons/mimetypes/#{file.icon}")',
    '    .name #{file.name}',
    '    .size #{file.size}',
    '    .type #{file.type}',
    '    .mtime #{file.mtime}',
].join('\n'));

// Our type
function Folder(jquery_element) {
  events.EventEmitter.call(this);
  this.element = jquery_element; // '#files'

  var self = this;
  // Click on blank
  this.element.parent().on('click', function() {
    self.element.children('.focus').removeClass('focus');
  });
  // Click on file
  this.element.delegate('.file', 'click', function(e) {
    self.element.children('.focus').removeClass('focus');
    $(this).addClass('focus');
    e.stopPropagation();
  });
  // Double click on file
  this.element.delegate('.file', 'dblclick', function() {
    var file_path = $(this).attr('data-path');
    self.emit('navigate', file_path, shared_mime.lookup(file_path));
  });
  // Right click: context Menu
  this.element.delegate('.file', 'contextmenu', function(ev){
    // there are other context menu for blank space
    ev.stopPropagation();

    self.element.children('.focus').removeClass('focus');
    $(this).addClass('focus');

    var file_element = $(this);
    self.emit('contextmenu', file_element, ev);
  });
}

util.inherits(Folder, events.EventEmitter);

Folder.prototype.open = function(dir) {
  var self = this;
  var showHiddenFiles = user_configs.Views.ShowHiddenFiles;

  fs.readdir(dir, function(error, files) {
    if (error) {
      console.log(error);
      window.alert(error);
      return;
    }

    if (!showHiddenFiles) {
       files = files.filter(function(file){
	  return !(/(^|.\/)\.+[^\/\.]/g).test(file);
       });
    }

    files = files.map(function(file){
      var fpath = path.join(dir, file);
      var mimetype = shared_mime.lookup(fpath) || "application/octet-stream";
      var icon_file = require('my/mimetypes-iconset.json')[mimetype];

      // gather size and mtime info
      var size = 0;
      var fstat = "<illegal>";
      try {
        var fstat = fs.statSync(fpath);
        if (fstat.isDirectory()) {
          var dirsize = fs.readdirSync(fpath).length;
          if (dirsize === 0 || dirsize === 1) {
            size = dirsize + " item";
          } else {
            size = dirsize + " items";
          }
        }
        else {
          size = filesize(size);
        }
      } catch (err){
          console.log(err);
          window.alert(err);
          return
      }

      return {"path": fpath,
              "name": file,
              "mime": mimetype,
              "icon": icon_file,
              "size": size,
              "mtime": fstat.mtime};
    });

    self.element.html(gen_files_view({ files: files }));
  });
}

exports.Folder = Folder;
